linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)"
) +
scale_x_continuous(breaks = 1)
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)"
) +
scale_x_continuous(breaks = 5)
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)"
)
sort(unique(game_sales$year_of_release))
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)"
) +
scale_x_continuous(breaks = 1988:2016)
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
sales_grouped <- sales_filtered %>%
group_by(year_of_release, developer) %>%
summarise(mean_sales_per_game = mean(sales))
#primary sales/game over time chart to provide mapping
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)"
)
sales_grouped <- sales_filtered %>%
group_by(year_of_release, developer) %>%
summarise(mean_sales_per_game = mean(sales))
#primary sales/game over time chart to provide mapping
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)"
)
?labs
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)",
colour = "Developer"
)
sales_year_filtered <-sales_dev_filtered %>%
filter(year_of_release == year)
sales_dev_filtered <- game_sales %>%
filter(developer != "Nintendo")
sales_year_filtered <-sales_dev_filtered %>%
filter(year_of_release == year)
View(sales_year_filtered)
ggplot(sales_year_filtered) +
aes(x = developer, fill = genre) +
geom_bar()
ggplot(sales_year_filtered) +
aes(x = developer, fill = genre) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = developer, fill = genre) +
geom_bar(position = "dodge") +
fact_wrap(~ developer)
ggplot(sales_year_filtered) +
aes(x = developer, fill = genre) +
geom_bar(position = "dodge") +
facet_wrap(~ developer)
ggplot(sales_year_filtered) +
aes(x = genre) +
geom_bar(position = "dodge") +
facet_wrap(~ developer)
ggplot(sales_year_filtered) +
geom_bar() +
facet_grid(genre ~ developer)
ggplot(sales_year_filtered) +
geom_bar(x = genre) +
facet_grid(genre ~ developer)
ggplot(sales_year_filtered) +
geom_bar(x = genre) +
facet_grid(genre ~ developer)
ggplot(sales_year_filtered) +
geom_bar(x = "genre") +
facet_grid(genre ~ developer)
ggplot(sales_year_filtered) +
geom_bar(x = genre) +
facet_grid(genre ~ developer)
ggplot(sales_year_filtered) +
geom_bar(x = developer, fill = genre)
ggplot(sales_year_filtered) +
geom_bar(aes(x = developer, fill = genre))
ggplot(sales_year_filtered) +
aes(x = developer, fill = genre) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = developer, fill = genre) +
geom_bar(position = "dodge") +
facet_wrap(~ developer)
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar()
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
facet_wrap(~developer)
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge") +
facet_wrap(~developer)
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = rating, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = platform, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar(fill = developer)
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar()
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar(colour = developer)
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar(fill = developer)
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar(colour = developer)
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar()
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar() +
scale_fill_discrete()
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar() +
scale_fill_discrete()
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar() +
scale_colour_discrete()
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar() +
scale_color_discrete()
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar() +
scale_fill_brewer()
ggplot(sales_year_filtered) +
aes(x = developer) +
geom_bar() +
scale_fill_discrete()
ggplot(sales_year_filtered) +
aes(x = developer, fill = developer) +
geom_bar()
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = rating, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = developer, fill = developer) +
geom_bar()
sales_year_filtered %>%
group_by(developer) %>%
summarise(mean_score = mean(critic_score)) %>%
ggplot() +
aes(x = developer, y = mean_score, fill = developer) +
geom_bar(stat = "identity")
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)",
colour = "Developer"
)
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "Genre",
y = "Games Produced",
fill = "Developer"
)
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "Genre",
y = "Games Produced",
fill = "Developer",
title = "Games Produced by Genre"
)
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "Genre",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by Genre"
)
ggplot(sales_year_filtered) +
aes(x = rating, fill = developer) +
geom_bar(position = "dodge")
?game_sales
ggplot(sales_year_filtered) +
aes(x = rating, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "ESRB Rating",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by ESRB Rating"
)
ggplot(sales_year_filtered) +
aes(x = platform, fill = developer) +
geom_bar(position = "dodge")
ggplot(sales_year_filtered) +
aes(x = platform, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "Platform",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by Platform"
)
ggplot(sales_year_filtered) +
aes(x = platform, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "Platform",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by Platform"
) +
theme(legend.position = "bottom")
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)",
colour = "Developer"
)
ggplot(sales_grouped) +
aes(
x = year_of_release,
y = mean_sales_per_game,
colour = developer) +
geom_line(stat = "identity",
alpha = 0.65) +
geom_vline(xintercept = year,
linetype = "dashed",
alpha = 0.5) +
labs(
title = "Mean Sales Per Game Over Time",
x = "Year of Release",
y = "Mean Sales per Game (in millions)",
colour = "Developer"
) +
theme(legend.position = "bottom")
ggplot(sales_year_filtered) +
aes(x = genre, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "Genre",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by Genre"
) +
theme(legend.position = "bottom")
ggplot(sales_year_filtered) +
aes(x = rating, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "ESRB Rating",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by ESRB Rating"
)
ggplot(sales_year_filtered) +
aes(x = rating, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "ESRB Rating",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by ESRB Rating"
) +
theme(legend.position = "bottom")
ggplot(sales_year_filtered) +
aes(x = platform, fill = developer) +
geom_bar(position = "dodge") +
labs(
x = "Platform",
y = "Total Games Produced",
fill = "Developer",
title = "Games Produced by Platform"
) +
theme(legend.position = "bottom")
ggplot(sales_year_filtered) +
aes(x = developer, fill = developer) +
geom_bar() +
theme(legend.position = "bottom")
ggplot(sales_year_filtered) +
aes(x = developer, fill = developer) +
geom_bar() +
labs(
x = "Developer",
y = "Total Games Produced",
fill = "Developer",
title = "Total Games Produced That Year"
)
theme(legend.position = "bottom")
ggplot(sales_year_filtered) +
aes(x = developer, fill = developer) +
geom_bar() +
labs(
x = "Developer",
y = "Games Produced",
fill = "Developer",
title = "Total Games Produced That Year"
)
theme(legend.position = "bottom")
ggplot(sales_year_filtered) +
aes(x = developer, fill = developer) +
geom_bar() +
labs(
x = "Developer",
y = "Games Produced",
fill = "Developer",
title = "Total Games Produced That Year"
) +
theme(legend.position = "bottom")
sales_year_filtered %>%
group_by(developer) %>%
summarise(mean_score = mean(critic_score)) %>%
ggplot() +
aes(x = developer, y = mean_score, fill = developer) +
geom_bar(stat = "identity") +
theme(legend.position = "bottom")
sales_year_filtered %>%
group_by(developer) %>%
summarise(mean_score = mean(critic_score)) %>%
ggplot() +
aes(x = developer, y = mean_score, fill = developer) +
geom_bar(stat = "identity") +
labs(
x = "Developer",
fill = "Developer",
y = "Average Critic Score",
title = "Average Critic Score per Game by Developer"
) +
theme(legend.position = "bottom")
sales_year_filtered %>%
group_by(developer) %>%
summarise(mean_score = mean(user_score)) %>%
ggplot() +
aes(x = developer, y = mean_score, fill = developer) +
geom_bar(stat = "identity") +
labs(
x = "Developer",
fill = "Developer",
y = "Average User Score",
title = "Average User Score per Game by Developer"
) +
theme(legend.position = "bottom")
min(game_sales$year_of_release)
min(game_sales$year_of_release):max(game_sales$year_of_release)
median(min(game_sales$year_of_release):max(game_sales$year_of_release))
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
library(shiny)
?fluidRow
?tabPanel
?tabsetPanel
?tabPanel
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
runApp('game_shiny')
?game_sales
library(CodeClanData)
game_sales
View(game_sales)
?game_sales
shiny::runApp('game_shiny')
